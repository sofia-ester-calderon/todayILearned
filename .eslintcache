[{"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/index.js":"1","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/App.js":"2","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/reportWebVitals.js":"3","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/aws-exports.js":"4","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/routing/RoutingComponent.js":"5","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/aboutme/AboutMeContainer.js":"6","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/login/LoginContainer.js":"7","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/login/LoginForm.js":"8","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/common/text/TextInput.js":"9","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/data/authHelper.js":"10","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/blogs/blogList/AllBlogsContainer.js":"11","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/routing/GuardedRoute.js":"12","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/blogs/edit-create/EditBlogContainer.js":"13","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/blogs/edit-create/CreateBlogContainer.js":"14","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/blogs/edit-create/BlogForm.js":"15","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/tags/TagConfigurerContainer.js":"16","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/tags/TagOverview.js":"17","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/data/blogHelper.js":"18","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/hooks/BlogTags.js":"19","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/tags/TagList.js":"20","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/blogs/blogList/BlogList.js":"21","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/blogs/blogList/BlogView.js":"22","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/menu/MenuBar.js":"23","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/config.js":"24"},{"size":886,"mtime":1609891262072,"results":"25","hashOfConfig":"26"},{"size":444,"mtime":1609892731924,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":1606957477348,"results":"28","hashOfConfig":"26"},{"size":875,"mtime":1608179943605,"results":"29","hashOfConfig":"26"},{"size":1231,"mtime":1609892854893,"results":"30","hashOfConfig":"26"},{"size":126,"mtime":1607045426911,"results":"31","hashOfConfig":"26"},{"size":2194,"mtime":1609892402967,"results":"32","hashOfConfig":"26"},{"size":1191,"mtime":1607320386042,"results":"33","hashOfConfig":"26"},{"size":1105,"mtime":1607474429998,"results":"34","hashOfConfig":"26"},{"size":225,"mtime":1609892970764,"results":"35","hashOfConfig":"26"},{"size":2093,"mtime":1609892319331,"results":"36","hashOfConfig":"26"},{"size":307,"mtime":1607384216306,"results":"37","hashOfConfig":"26"},{"size":643,"mtime":1608156360344,"results":"38","hashOfConfig":"26"},{"size":4235,"mtime":1609886226469,"results":"39","hashOfConfig":"26"},{"size":2711,"mtime":1609886226469,"results":"40","hashOfConfig":"26"},{"size":3295,"mtime":1607665702328,"results":"41","hashOfConfig":"26"},{"size":2491,"mtime":1607599911805,"results":"42","hashOfConfig":"26"},{"size":4325,"mtime":1609886226471,"results":"43","hashOfConfig":"26"},{"size":620,"mtime":1607580692888,"results":"44","hashOfConfig":"26"},{"size":657,"mtime":1608014144694,"results":"45","hashOfConfig":"26"},{"size":800,"mtime":1609886226466,"results":"46","hashOfConfig":"26"},{"size":1071,"mtime":1609886226468,"results":"47","hashOfConfig":"26"},{"size":2215,"mtime":1609892804823,"results":"48","hashOfConfig":"26"},{"size":436,"mtime":1609885530756,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j2h0w5",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/index.js",[],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/App.js",[],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/reportWebVitals.js",[],["102","103"],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/aws-exports.js",[],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/routing/RoutingComponent.js",[],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/aboutme/AboutMeContainer.js",[],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/login/LoginContainer.js",[],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/login/LoginForm.js",[],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/common/text/TextInput.js",[],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/data/authHelper.js",[],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/blogs/blogList/AllBlogsContainer.js",["104","105"],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/routing/GuardedRoute.js",[],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/blogs/edit-create/EditBlogContainer.js",[],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/blogs/edit-create/CreateBlogContainer.js",["106"],"import React, { useEffect, useState } from \"react\";\nimport BlogForm from \"./BlogForm\";\nimport { EditorState, convertToRaw, convertFromRaw } from \"draft-js\";\nimport TagConfigurerContainer from \"../../tags/TagConfigurerContainer\";\nimport Modal from \"react-modal\";\nimport { useBlogTagsContext } from \"../../../hooks/BlogTags\";\nimport blogHelper from \"../../../data/blogHelper\";\n\nvar dateFormat = require(\"dateformat\");\n\nconst CreateBlogContainer = (props) => {\n  const emptyBlog = {\n    title: \"\",\n    date: dateFormat(new Date(), \"yyyy-mm-dd\"),\n    text: \"\",\n  };\n  const tagContext = useBlogTagsContext();\n\n  const [newBlog, setNewBlog] = useState(emptyBlog);\n  const [editorText, setEditorText] = useState(EditorState.createEmpty());\n  const [showTagModal, setShowTagModal] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [originalTags, setOriginalTags] = useState([]);\n\n  useEffect(() => {\n    Modal.setAppElement(\"body\");\n  }, []);\n\n  useEffect(() => {\n    if (props.match.params.id) {\n      getBlog();\n    } else {\n      setNewBlog(emptyBlog);\n      setEditorText(EditorState.createEmpty());\n      tagContext.setBlogTags([]);\n    }\n  }, [props.match.params.id]);\n\n  async function getBlog() {\n    const blog = await blogHelper.getBlog(props.match.params.id);\n    console.log(\"got blog\", blog);\n    const updateBlog = {\n      title: blog.title,\n      date: blog.date,\n      id: blog.id,\n      text: blog.text,\n      _version: blog._version,\n    };\n    setNewBlog(updateBlog);\n    setEditorText(\n      EditorState.createWithContent(convertFromRaw(JSON.parse(blog.text)))\n    );\n    const tags = blog.tags.items.map((item) => {\n      return {\n        name: item.tag.name,\n        id: item.tag.id,\n      };\n    });\n    tagContext.setBlogTags(tags);\n    setOriginalTags(blog.tags.items.map((item) => item.tag.id));\n  }\n\n  function onChangeBlogInfo(event) {\n    const { name, value } = event.target;\n    setNewBlog((prevDetails) => ({\n      ...prevDetails,\n      [name]: value,\n    }));\n  }\n\n  function onChangeEditorText(event) {\n    setNewBlog((prevDetails) => ({\n      ...prevDetails,\n      text: JSON.stringify(convertToRaw(event.getCurrentContent())),\n    }));\n    setEditorText(event);\n  }\n\n  function onConfigureTags(event) {\n    event.preventDefault();\n    setShowTagModal(true);\n  }\n\n  function onCloseModal() {\n    if (tagContext.blogTags.length === 0) {\n      setErrors({ tags: \"A blog must have at least one tag\" });\n      return;\n    }\n    setShowTagModal(false);\n    setErrors({});\n  }\n\n  async function onCreateBlog(event) {\n    event.preventDefault();\n    console.log(\"blog: \", newBlog);\n    console.log(\"tags: \", tagContext.blogTags);\n\n    if (isFormValid()) {\n      if (props.match.params.id) {\n        await blogHelper.updateBlog(newBlog, tagContext.blogTags, originalTags);\n      } else {\n        await blogHelper.createBlog(newBlog, tagContext.blogTags);\n      }\n      tagContext.setBlogTags([]);\n      props.history.push(\"/\");\n    }\n  }\n\n  function isFormValid() {\n    const blogErrors = {};\n    if (!newBlog.title || newBlog.title === \"\") {\n      blogErrors.title = \"Please enter a title\";\n    }\n    if (!newBlog.date || newBlog.date === \"\") {\n      blogErrors.date = \"Please enter a valid date\";\n    }\n    if (tagContext.blogTags.length === 0) {\n      blogErrors.tags = \"A blog must have at least one tag\";\n    }\n    setErrors(blogErrors);\n    return Object.keys(blogErrors).length === 0;\n  }\n\n  function onCancel(event) {\n    event.preventDefault();\n    tagContext.setBlogTags([]);\n    props.history.push(\"/\");\n  }\n\n  return (\n    <>\n      <BlogForm\n        title={newBlog.title}\n        date={newBlog.date}\n        onChange={onChangeBlogInfo}\n        editorState={editorText}\n        onEditorChange={onChangeEditorText}\n        onConfigureTags={onConfigureTags}\n        hideEditor={showTagModal}\n        tags={tagContext.blogTags}\n        onCreateBlog={onCreateBlog}\n        errors={errors}\n        onCancel={onCancel}\n        editMode={props.match.params.id}\n      />\n      <Modal isOpen={showTagModal} style={{ content: { top: \"130px\" } }}>\n        <TagConfigurerContainer onClose={onCloseModal} error={errors.tags} />\n      </Modal>\n    </>\n  );\n};\n\nexport default CreateBlogContainer;\n","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/blogs/edit-create/BlogForm.js",[],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/tags/TagConfigurerContainer.js",["107","108"],"import React, { useEffect, useState } from \"react\";\nimport TagOverview from \"./TagOverview\";\nimport blogHelper from \"../../data/blogHelper\";\nimport { useBlogTagsContext } from \"../../hooks/BlogTags\";\n\nconst TagConfigurerContainer = ({ onClose, error }) => {\n  const tagContext = useBlogTagsContext();\n\n  const [unusedTags, setUnusedTags] = useState([]);\n  const [usedTags, setUsedTags] = useState([]);\n  const [tagData, setTagData] = useState({ name: \"\" });\n  const [loading, setLoading] = useState(false);\n  const [creating, setCreating] = useState(false);\n  const [errors, setErrors] = useState();\n\n  useEffect(() => {\n    fetchTags();\n  }, []);\n\n  useEffect(() => {\n    if (usedTags.length > 0) {\n      tagContext.setBlogTags([...usedTags]);\n    }\n  }, [usedTags]);\n\n  useEffect(() => {\n    setErrors((prevData) => ({ ...prevData, tag: error }));\n  }, [error]);\n\n  async function fetchTags() {\n    setLoading(true);\n    const tagsFromApi = await blogHelper.fetchTags();\n    console.log(\"TAGS FROM GRAPHQL\", tagsFromApi);\n    setUsedAndUnusedTags(tagsFromApi);\n    setLoading(false);\n  }\n\n  function setUsedAndUnusedTags(allTags) {\n    setUsedTags(tagContext.blogTags.sort(compare));\n\n    const blogTagIds = tagContext.blogTags.map((tag) => tag.id);\n\n    const remainingTags = allTags.filter((tag) => !blogTagIds.includes(tag.id));\n    setUnusedTags(remainingTags.sort(compare));\n  }\n\n  function onChangeTagName(event) {\n    const { value } = event.target;\n    setTagData({ name: value });\n  }\n\n  async function onCreateNewTag(event) {\n    setErrors((prevData) => ({ ...prevData, create: null }));\n\n    event.preventDefault();\n    if (tagData.name === \"\") {\n      return;\n    }\n    const allTags = [...unusedTags, ...usedTags];\n    if (\n      allTags.find(\n        (tag) => tag.name.toUpperCase() === tagData.name.toUpperCase()\n      )\n    ) {\n      setErrors((prevData) => ({ ...prevData, create: \"Tag already exists\" }));\n      return;\n    }\n    setCreating(true);\n    const newTag = await blogHelper.createTag(tagData);\n    setTagData({ name: \"\" });\n    setUnusedTags((prevData) => [...prevData, newTag]);\n    setCreating(false);\n  }\n\n  function onAddTagToBlog(blogTag) {\n    setUsedTags((prevData) => {\n      let tags = [...prevData, blogTag];\n      tags = tags.sort(compare);\n      return tags;\n    });\n    setUnusedTags((prevData) =>\n      prevData.filter((tag) => tag.id !== blogTag.id)\n    );\n  }\n\n  function onRemoveTagFromBlog(blogTag) {\n    setUsedTags((prevData) => prevData.filter((tag) => tag.id !== blogTag.id));\n    setUnusedTags((prevData) => {\n      let tags = [...prevData, blogTag];\n      tags = tags.sort(compare);\n      return tags;\n    });\n  }\n\n  function compare(a, b) {\n    if (a.name.toUpperCase() < b.name.toUpperCase()) return -1;\n    if (b.name.toUpperCase() > a.name.toUpperCase()) return 1;\n    return 0;\n  }\n\n  return (\n    <>\n      <TagOverview\n        unusedTags={unusedTags}\n        usedTags={usedTags}\n        tagName={tagData.name}\n        onChangeTagName={onChangeTagName}\n        onCreateTag={onCreateNewTag}\n        onClose={onClose}\n        loading={loading}\n        creating={creating}\n        onAddTag={onAddTagToBlog}\n        onRemoveTag={onRemoveTagFromBlog}\n        errors={errors}\n      />\n    </>\n  );\n};\n\nexport default TagConfigurerContainer;\n","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/tags/TagOverview.js",[],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/data/blogHelper.js",["109","110"],"// import { API, graphqlOperation } from \"aws-amplify\";\n// import { listTags } from \"../graphql/queries\";\n// import {\n//   searchBlogs,\n//   listBlogTags,\n//   getBlog as getBlogApi,\n// } from \"../graphql/queries-custom\";\n// import {\n//   createTag as createTagApi,\n//   createBlog as createBlogApi,\n//   createBlogTag as createBlogTagApi,\n//   updateBlog as updateBlogApi,\n//   deleteBlogTag,\n// } from \"../graphql/mutations\";\n\nconst fetchTags = async () => {\n  return {\n    id: \"1\",\n    name: \"Java\",\n  };\n  // const apiData = await API.graphql({ query: listTags });\n  // return apiData.data.listTags.items;\n};\n\nconst createTag = async (tagData) => {\n  // const newTag = await API.graphql({\n  //   query: createTagApi,\n  //   variables: { input: tagData },\n  // });\n  // return newTag.data.createTag;\n};\n\nconst createBlog = async (blogData, tags) => {\n  // const newBlog = await API.graphql({\n  //   query: createBlogApi,\n  //   variables: { input: blogData },\n  // });\n  // const blogId = newBlog.data.createBlog.id;\n  // console.log(\"created blog\", newBlog);\n  // console.log(\"blog id\", blogId);\n  // tags.forEach((tag) => {\n  //   const blogTagData = {\n  //     blogID: blogId,\n  //     tagID: tag.id,\n  //   };\n  //   API.graphql({\n  //     query: createBlogTagApi,\n  //     variables: { input: blogTagData },\n  //   });\n  // });\n};\n\nconst updateBlog = async (blogData, newTags, oldTags) => {\n  // for (const tagId of oldTags) {\n  //   console.log(\"deleting blogtag\", tagId);\n  //   await API.graphql({\n  //     query: deleteBlogTag,\n  //     variables: { input: { id: tagId } },\n  //   });\n  // }\n  // const newBlog = await API.graphql({\n  //   query: updateBlogApi,\n  //   variables: { input: blogData },\n  // });\n  // console.log(\"updated blog\", newBlog);\n  // newTags.forEach((tag) => {\n  //   const blogTagData = {\n  //     blogID: blogData.id,\n  //     tagID: tag.id,\n  //   };\n  //   API.graphql({\n  //     query: createBlogTagApi,\n  //     variables: { input: blogTagData },\n  //   });\n  // });\n};\n\nconst fetchBlogs = async (filter, nextToken) => {\n  return {\n    items: [\n      {\n        id: 1,\n        date: \"2020-12-01\",\n        text: '{\"text\": \"Hello\"}',\n        tags: {\n          items: [{ tag: { name: \"Java\", id: \"1\" } }],\n        },\n      },\n    ],\n  };\n  // const blogs = await API.graphql(\n  //   graphqlOperation(searchBlogs, {\n  //     limit: 8,\n  //     nextToken,\n  //     filter,\n  //     sort: {\n  //       direction: \"desc\",\n  //       field: \"date\",\n  //     },\n  //   })\n  // );\n  // return blogs.data.searchBlogs;\n};\n\nconst getBlog = async (id) => {\n  return {\n    id: 1,\n    date: \"2020-12-01\",\n    text: \"hello\",\n  };\n  // const blog = await API.graphql({\n  //   query: getBlogApi,\n  //   variables: { id },\n  // });\n  // return blog.data.getBlog;\n};\n\nconst fetchBlogsForTags = async () => {\n  // let filterBlogTags = {\n  //   and: [\n  //     {\n  //       tagID: { eq: \"b9d9e410-3b2c-4fe5-ad8d-b097ce818b52\" },\n  //     },\n  //     {\n  //       tagID: { eq: \"0a64177b-1444-407e-917d-8dd6de982b1a\" },\n  //     },\n  //   ],\n  // };\n  // // find blogs for tagID\n  // const blogTagsFromApi = await API.graphql(\n  //   graphqlOperation(listBlogTags, { limit: 10, filter: filterBlogTags })\n  // );\n  // console.log(\"blogTag Java: \", blogTagsFromApi);\n};\n\nconst filterBlogs = async () => {\n  // let filter = { date: { gt: \"2020-12-07\" } };\n  // const blogsFromAuthHelperNT = await blogHelper.fetchBlogs(\n  //   null,\n  //   \"1607040000000\"\n  // );\n  // console.log(\"from auth helper with next token: \", blogsFromAuthHelperNT);\n  // const blogsFromAuthHelperFilter = await blogHelper.fetchBlogs(filter);\n  // console.log(\"from auth helper with filter: \", blogsFromAuthHelperFilter);\n  // const blogsFromAuthHelperFilterNT = await blogHelper.fetchBlogs(\n  //   filter,\n  //   \"1607644800000\"\n  // );\n  // console.log(\n  //   \"from auth helper with filter and next token: \",\n  //   blogsFromAuthHelperFilterNT\n  // );\n};\n\nconst blogHelper = {\n  fetchTags,\n  createTag,\n  createBlog,\n  fetchBlogs,\n  getBlog,\n  updateBlog,\n};\n\nexport default blogHelper;\n\n// async function deleteBlog({ id }) {\n//   const newNotesArray = blogs.filter((note) => note.id !== id);\n//   setBlogs(newNotesArray);\n//   await API.graphql({\n//     query: deleteBlogGraphQL,\n//     variables: { input: { id } },\n//   });\n// }\n","/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/hooks/BlogTags.js",[],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/tags/TagList.js",[],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/blogs/blogList/BlogList.js",[],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/blogs/blogList/BlogView.js",[],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/components/menu/MenuBar.js",[],"/Users/sofiacalderon/Documents/private_projects/react/todayILearned/today-i-learned/src/config.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":4,"column":10,"nodeType":"117","messageId":"118","endLine":4,"endColumn":24},{"ruleId":"119","severity":1,"message":"120","line":14,"column":6,"nodeType":"121","endLine":14,"endColumn":8,"suggestions":"122"},{"ruleId":"119","severity":1,"message":"123","line":37,"column":6,"nodeType":"121","endLine":37,"endColumn":29,"suggestions":"124"},{"ruleId":"119","severity":1,"message":"125","line":18,"column":6,"nodeType":"121","endLine":18,"endColumn":8,"suggestions":"126"},{"ruleId":"119","severity":1,"message":"127","line":24,"column":6,"nodeType":"121","endLine":24,"endColumn":16,"suggestions":"128"},{"ruleId":"115","severity":1,"message":"129","line":118,"column":7,"nodeType":"117","messageId":"118","endLine":118,"endColumn":24},{"ruleId":"115","severity":1,"message":"130","line":136,"column":7,"nodeType":"117","messageId":"118","endLine":136,"endColumn":18},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"no-unused-vars","'convertFromRaw' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetch'. Either include it or remove the dependency array.","ArrayExpression",["133"],"React Hook useEffect has missing dependencies: 'emptyBlog', 'getBlog', and 'tagContext'. Either include them or remove the dependency array.",["134"],"React Hook useEffect has a missing dependency: 'fetchTags'. Either include it or remove the dependency array.",["135"],"React Hook useEffect has a missing dependency: 'tagContext'. Either include it or remove the dependency array.",["136"],"'fetchBlogsForTags' is assigned a value but never used.","'filterBlogs' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},"Update the dependencies array to be: [fetch]",{"range":"145","text":"146"},"Update the dependencies array to be: [emptyBlog, getBlog, props.match.params.id, tagContext]",{"range":"147","text":"148"},"Update the dependencies array to be: [fetchTags]",{"range":"149","text":"150"},"Update the dependencies array to be: [tagContext, usedTags]",{"range":"151","text":"152"},[464,466],"[fetch]",[1163,1186],"[emptyBlog, getBlog, props.match.params.id, tagContext]",[643,645],"[fetchTags]",[756,766],"[tagContext, usedTags]"]